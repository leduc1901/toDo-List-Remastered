{"version":3,"sources":["components/Title.js","actions/toDoListAction.js","actions/actionTypes.js","components/Item.js","components/List.js","components/Button.js","reducers/index.js","App.js","serviceWorker.js","index.js"],"names":["Title","props","toggle","setState","state","showInput","type","id","onKeyUp","pressEnter","placeholder","e","keyCode","dispatchPressEnter","target","value","document","getElementById","class","onClick","this","dispatchDeleleAll","React","Component","connect","dispatch","Item","deleteState","stopPropagation","dispatchDeleteTask","currentTarget","completeTask","dispatchCompleteTask","fetchData","startRange","endRange","totalPage","currentPage","length","item","slice","map","val","i","className","isDone","onDoubleClick","bind","data-id","dispatchReturnPage","listPage","deleteTask","returnPage","List","Button","selectPage","dispatchSelectPage","prevBtn","dispatchPrevBtn","nextBtn","dispatchNextBtn","renderButton","Math","ceil","arr","dispatchSetPage","push","renderBtn","href","Fragment","setPage","defaultState","persistConfig","key","storage","blacklist","persistedReducer","persistReducer","action","Object","assign","concat","newValue","splice","console","log","newState","JSON","parse","stringify","parseInt","store","createStore","persistor","persistStore","App","loading","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6SAKMA,E,YACF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAOVC,OAAS,WACL,EAAKC,SAAS,CACVD,QAAU,EAAKE,MAAMF,UAVV,EAcnBG,UAAY,WACR,GAAG,EAAKD,MAAMF,OACV,OACI,2BAAOI,KAAK,OAAQC,GAAG,OAAOC,QAAS,EAAKC,WAAYC,YAAY,oBAjB7D,EAsBnBD,WAAa,SAACE,GACO,KAAdA,EAAEC,UACD,EAAKX,MAAMY,mBAAmBF,EAAEG,OAAOC,OACvCC,SAASC,eAAe,QAAQF,MAAQ,KAtB5C,EAAKX,MAAQ,CACTF,QAAS,GAJE,E,sEAgCf,OACI,oCACA,yCAAc,uBAAGgB,MAAM,YAAYC,QAASC,KAAKnB,MAAMoB,mBAAzC,SAAqE,uBAAGH,MAAM,MAAMC,QAASC,KAAKlB,QAA7B,MACxFkB,KAAKf,iB,GApCQiB,IAAMC,WAuDXC,mBAbf,SAAyBpB,GACrB,MAAO,MAKX,SAA4BqB,GACxB,MAAO,CACHZ,mBAAqB,SAACE,GAAD,OAAWU,ECrDd,SAACV,GACvB,MAAO,CACHT,KCJmB,cDKnBS,SDkDyCN,CAAWM,KACpDM,kBAAoB,kBAAMI,ECLvB,CACHnB,KC5CkB,mBFoDXkB,CAA4CxB,G,OGxDrD0B,E,YACF,WAAYzB,GAAQ,IAAD,8BACf,4CAAMA,KAMV0B,YAAc,SAAChB,GACXA,EAAEiB,kBACF,EAAK3B,MAAM4B,mBAAmBlB,EAAEmB,cAAcvB,KAT/B,EAYnBwB,aAAe,SAACpB,GACZ,EAAKV,MAAM+B,qBAAqBrB,EAAEmB,cAAcvB,KAbjC,EAgBnB0B,UAAY,WACR,IAAIC,EACAC,EACD,EAAKlC,MAAMmC,WAAa,GACvBF,EAAqC,EAAvB,EAAKjC,MAAMoC,YAAgB,EACzCF,EAAmC,EAAvB,EAAKlC,MAAMoC,cAEvBH,EAAa,EACbC,EAAW,EAAKlC,MAAMc,MAAMuB,OAAS,GAEzC,IAAIC,EAAO,EAAKtC,MAAMc,MAAMyB,MAAMN,EAAaC,GAAUM,KAAI,SAACC,EAAMC,GAChE,OACI,wBAAIC,UAAWF,EAAIG,OAAS,iBAAmB,OAAQC,cAAe,EAAKf,aAAagB,KAAlB,gBAA8BxC,GAAK2B,EAAaS,GACtH,0BAAMK,UAASL,EAAGpC,GAAI2B,EAAaS,EAAGxB,QAAS,EAAKQ,YAAYoB,KAAjB,iBAC3C,uBAAG7B,MAAM,eAAT,OAEHwB,EAAIA,QAOb,OAH6B,GAA1B,EAAKzC,MAAMoC,aAA8C,GAA1B,EAAKpC,MAAMoC,aAAmC,GAAfE,EAAKD,QAClE,EAAKrC,MAAMgD,mBAAmB,EAAKhD,MAAMoC,aAEtCE,GApCP,EAAKnC,MAAQ,GAHE,E,sEA4Cf,OACI,oCACCgB,KAAKa,iB,GA/CCX,IAAMC,WAsEVC,mBAjBf,SAAyBpB,GACrB,MAAO,CACHW,MAAQX,EAAMW,MACdsB,YAAcjC,EAAMiC,YACpBD,UAAYhC,EAAMgC,UAClBc,SAAW9C,EAAM8C,aAIzB,SAA4BzB,GACxB,MAAO,CACHI,mBAAqB,SAACtB,GAAD,OAAQkB,EF5DX,SAAClB,GACvB,MAAO,CACHD,KCTmB,cDUnBC,MEyDsC4C,CAAW5C,KACjDyB,qBAAuB,SAACzB,GAAD,OAAQkB,EFvDX,SAAClB,GACzB,MAAO,CACHD,KCdqB,gBDerBC,MEoDwCwB,CAAaxB,KACrD0C,mBAAqB,SAAC1C,GAAD,OAAQkB,EF1BX,SAAClB,GACvB,MAAO,CACHD,KCvCmB,cDwCnBC,MEuBsC6C,CAAW7C,QAI1CiB,CAA8CE,GCrD9C2B,E,YAlBX,WAAYpD,GAAQ,IAAD,8BACf,4CAAMA,KAEDG,MAAQ,GAHE,E,sEAQf,OACI,wBAAIc,MAAM,WAAWX,GAAG,YACpB,kBAAC,EAAD,W,GAXGe,IAAMC,WCEnB+B,E,YACF,WAAYrD,GAAQ,IAAD,8BACf,4CAAMA,KAMVsD,WAAa,SAAC5C,GACV,EAAKV,MAAMuD,mBAAmB7C,EAAEmB,cAAcvB,KAR/B,EAWnBkD,QAAU,WACN,EAAKxD,MAAMyD,gBAAgB,EAAKzD,MAAMoC,cAZvB,EAenBsB,QAAU,WACN,EAAK1D,MAAM2D,gBAAgB,EAAK3D,MAAMoC,cAhBvB,EAoBnBwB,aAAe,WACX,GAAG,EAAK5D,MAAMc,MAAMuB,QAAU,EAAG,CAC7B,IAAIF,EAAY0B,KAAKC,KAAK,EAAK9D,MAAMc,MAAMuB,OAAS,GAChD0B,EAAM,GACV,EAAK/D,MAAMgE,gBAAgB7B,GAC3B,IAAI,IAAIO,EAAI,EAAIA,EAAIP,EAAYO,IAC5BqB,EAAIE,KAAKvB,GAEb,IAAIwB,EAAYH,EAAIvB,KAAI,SAAAE,GACpB,OACI,wBACIC,UAAW,EAAK3C,MAAMoC,cAAgBM,EAAE,EAAI,iBAAmB,SAC/DpC,GAAIoC,EAAE,EACNxB,QAAS,EAAKoC,WAAWR,KAAhB,iBACL,uBAAGqB,KAAK,IAAK7D,GAAIoC,EAAE,GAAIA,EAAE,OAIzC,OACI,yBAAKzB,MAAM,eACP,yBAAKA,MAAM,cAAcC,QAAS,EAAKsC,SAAvC,YACA,yBAAKvC,MAAM,UAAUC,QAAS,EAAKwC,SAAnC,QACA,wBAAIpD,GAAG,QAAQW,MAAM,UAChBiD,MAxCjB,EAAK/D,MAAQ,GAHE,E,sEAmDf,OACI,kBAAC,IAAMiE,SAAP,KACKjD,KAAKyC,oB,GAtDDvC,IAAMC,WAiFZC,mBAnBf,SAAyBpB,GACrB,MAAO,CACHW,MAAQX,EAAMW,MACdsB,YAAcjC,EAAMiC,YACpBD,UAAYhC,EAAMgC,UAClBc,SAAW9C,EAAM8C,aAIzB,SAA4BzB,GACxB,MAAO,CACHwC,gBAAkB,SAAC7B,GAAD,OAAeX,EJnDlB,SAACW,GACpB,MAAO,CACH9B,KCzBgB,WD0BhB8B,aIgD0CkC,CAAQlC,KAClDoB,mBAAqB,SAACjD,GAAD,OAAQkB,EJ1DX,SAAClB,GACvB,MAAO,CACHD,KClBmB,cDmBnBC,MIuDsCgD,CAAWhD,KACjDmD,gBAAkB,SAACnD,GAAD,OAAQkB,EJ/CX,SAAClB,GACpB,MAAO,CACHD,KC7BgB,WD8BhBC,MI4CmCkD,CAAQlD,KAC3CqD,gBAAkB,SAACrD,GAAD,OAAQkB,EJ1CX,SAAClB,GACpB,MAAO,CACHD,KClCgB,WDmChBC,MIuCmCoD,CAAQpD,QAKpCiB,CAA6C8B,G,QCnFtDiB,EAAe,CACjBxD,MAAQ,CAAC,CAAE2B,IAAM,IAAKG,QAAS,IAC/BR,YAAc,EACdD,UAAY,EACZc,SAAW,I,kDCMTsB,EAAgB,CACpBC,IAAK,OACLC,YAIAC,UAAW,IAKPC,EAAmBC,YAAeL,GDdzB,WAAwD,IAA/BpE,EAA8B,uDAAtBmE,EAAeO,EAAO,uCACnE,OAAOA,EAAOxE,MACV,IJXoB,cIYf,MAAmB,IAAhBwE,EAAO/D,MACCX,EAEJ2E,OAAOC,OAAO,GAAI5E,EAAQ,CAC7BW,MAAQX,EAAMW,MAAMkE,OAAO,CAACvC,IAAMoC,EAAO/D,MAAS8B,QAAS,IAC3DR,YAAcjC,EAAMgC,YAG5B,IJnBmB,cIoBf,IAAI8C,EAAWH,OAAOC,OAAO,GAAI5E,EAAMW,OAGnC,OAFAmE,EAASC,OAAOL,EAAOvE,GAAK,GAC5B6E,QAAQC,IAAIH,GACLH,OAAOC,OAAO,GAAI5E,EAAO,CAC5BW,MAAQmE,IAEpB,IJzBqB,gBI0BjB,IAAII,EAAWC,KAAKC,MAAMD,KAAKE,UAAUrF,IAKzC,OAJAkF,EAASvE,MAAM+D,EAAOvE,IAAtB,eACOH,EAAMW,MAAM+D,EAAOvE,IAD1B,CAEIsC,QAAUyC,EAASvE,MAAM+D,EAAOvE,IAAIsC,SAEjCyC,EACX,IJ/BgB,WIgCZ,OAAGR,EAAO1C,UAAYhC,EAAMgC,UACjB2C,OAAOC,OAAO,GAAI5E,EAAQ,CAC7BgC,UAAY0C,EAAO1C,UACnBC,YAAcyC,EAAO1C,YAGtB2C,OAAOC,OAAO,GAAI5E,EAAQ,CAC7BgC,UAAY0C,EAAO1C,YAE3B,IJxCmB,cIyCf,OAAO2C,OAAOC,OAAO,GAAI5E,EAAQ,CAC7BiC,YAAcqD,SAASZ,EAAOvE,MAEtC,IJ3CgB,WI4CR,OAAgB,GAAbuE,EAAOvE,GACCH,EAEA2E,OAAOC,OAAO,GAAI5E,EAAQ,CAC7BiC,YAAcyC,EAAOvE,GAAK,IAG1C,IJlDgB,WImDR,OAAGuE,EAAOvE,IAAMH,EAAMgC,UACXhC,EAEA2E,OAAOC,OAAO,GAAI5E,EAAQ,CAC7BiC,YAAcyC,EAAOvE,GAAK,IAG1C,IJzDmB,cI0Df,OAAOwE,OAAOC,OAAO,GAAI5E,EAAQ,CAC7BiC,YAAcyC,EAAOvE,GAAK,IAElC,IJ5DkB,aI8Dd,OADA6E,QAAQC,IAAI,GACLN,OAAOC,OAAO,GAAI5E,EAAQ,CAC7BW,MAAQ,KAEhB,QACI,OAAOX,MCjDfuF,EAAQC,YAAYhB,GACpBiB,EAAYC,YAAaH,GAiBdI,MAff,WACE,OACE,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,IAAD,CAAaK,QAAS,KAAMH,UAAWA,GACrC,yBAAKjD,UAAU,aACX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,UCvBQqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASvF,SAASC,eAAe,SD6H3C,kBAAmBuF,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e1742876.chunk.js","sourcesContent":["import React from 'react';\r\nimport {connect} from 'react-redux'\r\nimport { pressEnter , deleteAll} from '../actions/toDoListAction'\r\n\r\n\r\nclass Title extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            toggle : true\r\n        };\r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            toggle : !this.state.toggle\r\n        })\r\n    }\r\n\r\n    showInput = () => {\r\n        if(this.state.toggle){\r\n            return (\r\n                <input type=\"text\"  id=\"name\" onKeyUp={this.pressEnter} placeholder=\"[Add New Todo]\"/>\r\n            )\r\n        }\r\n    }\r\n\r\n    pressEnter = (e) => {\r\n        if(e.keyCode === 13){\r\n            this.props.dispatchPressEnter(e.target.value)\r\n            document.getElementById('name').value = \"\";\r\n        }\r\n    } \r\n\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <h1>To-Do List<i class=\"removeall\" onClick={this.props.dispatchDeleleAll}>Clear</i><i class=\"add\" onClick={this.toggle}>+</i></h1>\r\n\t\t    {this.showInput()}\r\n          </>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n      \r\n    }\r\n  }\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n    return {\r\n        dispatchPressEnter : (value) => dispatch(pressEnter(value)),\r\n        dispatchDeleleAll : () => dispatch(deleteAll())\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Title);","import * as ActionType from './actionTypes'\r\n\r\nexport const pressEnter = (value) => {\r\n    return {\r\n        type : ActionType.PRESS_ENTER,\r\n        value\r\n    }\r\n}\r\nexport const deleteTask = (id) => {\r\n    return {\r\n        type : ActionType.DELETE_TASK,\r\n        id\r\n    }\r\n}\r\nexport const completeTask = (id) => {\r\n    return {\r\n        type : ActionType.COMPLETE_TASK,\r\n        id\r\n    }\r\n}\r\nexport const selectPage = (id) => {\r\n    return {\r\n        type : ActionType.SELECT_PAGE,\r\n        id\r\n    }\r\n}\r\nexport const setPage = (totalPage) => {\r\n    return {\r\n        type : ActionType.SET_PAGE,\r\n        totalPage\r\n    }\r\n}\r\nexport const prevBtn = (id) => {\r\n    return {\r\n        type : ActionType.PREV_BTN,\r\n        id\r\n    }\r\n}\r\nexport const nextBtn = (id) => {\r\n    return {\r\n        type : ActionType.NEXT_BTN,\r\n        id\r\n    }\r\n}\r\nexport const returnPage = (id) => {\r\n    return {\r\n        type : ActionType.RETURN_PAGE,\r\n        id\r\n    }\r\n}\r\nexport const deleteAll = () => {\r\n    return {\r\n        type : ActionType.DELETE_ALL\r\n    }\r\n}","export const PRESS_ENTER = 'PRESS_ENTER';\r\nexport const DELETE_TASK = 'DELETE_TASK';\r\nexport const COMPLETE_TASK = 'COMPLETE_TASK';\r\nexport const SET_PAGE = 'SET_PAGE'\r\nexport const SELECT_PAGE = 'SELECT_PAGE';\r\nexport const PREV_BTN = 'PREV_BTN';\r\nexport const NEXT_BTN = 'NEXT_BTN';\r\nexport const RETURN_PAGE = 'RETURN_PAGE';\r\nexport const DELETE_ALL = 'DELETE_ALL';","import React from 'react';\r\nimport { connect } from 'react-redux'\r\nimport { deleteTask , completeTask , returnPage} from '../actions/toDoListAction'\r\n\r\nclass Item extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    deleteState = (e) => {\r\n        e.stopPropagation();\r\n        this.props.dispatchDeleteTask(e.currentTarget.id)\r\n    }\r\n \r\n    completeTask = (e) => {\r\n        this.props.dispatchCompleteTask(e.currentTarget.id)\r\n    }\r\n\r\n    fetchData = () => {\r\n        let startRange;\r\n        let endRange;\r\n        if(this.props.totalPage >= 1){\r\n            startRange = (this.props.currentPage*5) -5;\r\n            endRange =  this.props.currentPage*5\r\n        }else{\r\n            startRange = 0;\r\n            endRange = this.props.value.length - 1\r\n        }\r\n        let item = this.props.value.slice(startRange , endRange).map((val , i) => {\r\n            return (\r\n                <li className={val.isDone ? 'item completed' : 'item'} onDoubleClick={this.completeTask.bind(this)} id={ startRange + i} >\r\n                <span data-id={i} id={startRange + i} onClick={this.deleteState.bind(this)} >\r\n                    <i class='fa fa-trash' >  </i>\r\n                </span>\r\n                {val.val}\r\n            </li>\r\n            )     \r\n        })\r\n        if(this.props.currentPage != 1 && this.props.currentPage != 0 && item.length == 0){\r\n            this.props.dispatchReturnPage(this.props.currentPage)\r\n        }  \r\n        return item\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <>\r\n            {this.fetchData()}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return {\r\n        value : state.value,\r\n        currentPage : state.currentPage,\r\n        totalPage : state.totalPage,\r\n        listPage : state.listPage\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n    return {\r\n        dispatchDeleteTask : (id) => dispatch(deleteTask(id)),\r\n        dispatchCompleteTask : (id) => dispatch(completeTask(id)),\r\n        dispatchReturnPage : (id) => dispatch(returnPage(id))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps , mapDispatchToProps)(Item);","import React from 'react';\r\nimport Item from \"./Item\"\r\nclass List extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ul class=\"todoList\" id=\"todoList\">   \r\n                <Item/>\r\n\t\t    </ul>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default List;","import React from 'react';\r\nimport {connect} from 'react-redux'\r\nimport {setPage , selectPage , prevBtn , nextBtn} from \"../actions/toDoListAction\"\r\n\r\nclass Button extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    selectPage = (e) => {\r\n        this.props.dispatchSelectPage(e.currentTarget.id)\r\n    }\r\n\r\n    prevBtn = () => {\r\n        this.props.dispatchPrevBtn(this.props.currentPage)\r\n    }\r\n    \r\n    nextBtn = () => {\r\n        this.props.dispatchNextBtn(this.props.currentPage)\r\n    }\r\n \r\n\r\n    renderButton = () => {\r\n        if(this.props.value.length >= 5 ){\r\n            let totalPage = Math.ceil(this.props.value.length / 5 );\r\n            let arr = [];\r\n            this.props.dispatchSetPage(totalPage)\r\n            for(let i = 0 ; i < totalPage ; i++){\r\n                arr.push(i)\r\n            }\r\n            let renderBtn = arr.map(i => {\r\n                return (\r\n                    <li \r\n                        className={this.props.currentPage === i+1 ? \"pagili current\" : \"pagili\"}  \r\n                        id={i+1}\r\n                        onClick={this.selectPage.bind(this)} >\r\n                            <a href='#'  id={i+1}>{i+1}</a>\r\n                    </li>\r\n                )\r\n            })\r\n            return (\r\n                <div class=\"pagination1\">\r\n                    <div class=\"previousBtn\" onClick={this.prevBtn}>Previous</div>\r\n                    <div class=\"nextBtn\" onClick={this.nextBtn}>Next</div>\r\n                    <ul id=\"pagin\" class=\"pagin1\">\r\n                        {renderBtn}\r\n                    </ul>\r\n               </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {this.renderButton()}\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nfunction mapStateToProps(state){\r\n    return {\r\n        value : state.value,\r\n        currentPage : state.currentPage,\r\n        totalPage : state.totalPage,\r\n        listPage : state.listPage\r\n    }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n    return {\r\n        dispatchSetPage : (totalPage) => dispatch(setPage(totalPage)),\r\n        dispatchSelectPage : (id) => dispatch(selectPage(id)),\r\n        dispatchPrevBtn : (id) => dispatch(prevBtn(id)),\r\n        dispatchNextBtn : (id) => dispatch(nextBtn(id))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Button);","import * as ActionType from '../actions/actionTypes';\r\n\r\nconst defaultState = {\r\n    value : [{ val : \"1\", isDone : false}],\r\n    currentPage : 1,\r\n    totalPage : 1,\r\n    listPage : []\r\n}\r\n\r\nexport default function toDoListReducer(state = defaultState , action){\r\n   switch(action.type){\r\n       case ActionType.PRESS_ENTER:\r\n            if(action.value == \"\"){\r\n                return state\r\n            }else{\r\n            return Object.assign({}, state , {\r\n                value : state.value.concat({val : action.value  , isDone : false}),\r\n                currentPage : state.totalPage\r\n            });\r\n        }\r\n        case ActionType.DELETE_TASK:\r\n            let newValue = Object.assign([], state.value);\r\n                newValue.splice(action.id , 1)\r\n                console.log(newValue)\r\n                return Object.assign({}, state ,{\r\n                    value : newValue\r\n                });  \r\n        case ActionType.COMPLETE_TASK:\r\n            let newState = JSON.parse(JSON.stringify(state))\r\n            newState.value[action.id] = {\r\n                ...state.value[action.id] , \r\n                isDone : !newState.value[action.id].isDone \r\n            }\r\n            return newState \r\n        case ActionType.SET_PAGE:\r\n            if(action.totalPage > state.totalPage){\r\n                return Object.assign({}, state , {\r\n                    totalPage : action.totalPage,\r\n                    currentPage : action.totalPage\r\n                });\r\n            }\r\n            return Object.assign({}, state , {\r\n                totalPage : action.totalPage,\r\n            });\r\n        case ActionType.SELECT_PAGE:\r\n            return Object.assign({}, state , {\r\n                currentPage : parseInt(action.id)\r\n            })\r\n        case ActionType.PREV_BTN:\r\n                if(action.id == 1){\r\n                    return state\r\n                }else{\r\n                    return Object.assign({}, state , {\r\n                        currentPage : action.id - 1\r\n                    });\r\n                }\r\n        case ActionType.NEXT_BTN:\r\n                if(action.id == state.totalPage){\r\n                    return state\r\n                }else{\r\n                    return Object.assign({}, state , {\r\n                        currentPage : action.id + 1\r\n                    });\r\n                }\r\n        case ActionType.RETURN_PAGE:\r\n            return Object.assign({}, state , {\r\n                currentPage : action.id - 1\r\n            })\r\n        case ActionType.DELETE_ALL:\r\n            console.log(1)\r\n            return Object.assign({}, state , {\r\n                value : [],\r\n            })\r\n        default:\r\n            return state\r\n   } \r\n}","import React from 'react';\nimport {Provider} from 'react-redux';\nimport Title from './components/Title';\nimport List from './components/List';\nimport Button from \"./components/Button\";\nimport allReducers from \"./reducers\"\nimport \"./App.css\"\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage' // or whatever storage you are using\nimport { PersistGate } from 'redux-persist/es/integration/react';\nimport {createStore} from 'redux';\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  // whitelist: [                    \n  //   'accountReducer'\n  // ],\n  blacklist: [\n    // 'late'\n  ]\n}\n\nconst persistedReducer = persistReducer(persistConfig, allReducers)\n\nlet store = createStore(persistedReducer);\nlet persistor = persistStore(store)\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <div className=\"container\" >\n            <Title/>\n            <List/>\n            <Button/>\n        </div>\n      </PersistGate>\n      \n    </Provider>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('main'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}